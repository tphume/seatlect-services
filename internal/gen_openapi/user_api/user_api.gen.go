// Package user_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package user_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Id *string `json:"_id,omitempty"`
}

// PostUserLoginJSONBody defines parameters for PostUserLogin.
type PostUserLoginJSONBody LoginRequest

// PostUserLoginRequestBody defines body for PostUserLogin for application/json ContentType.
type PostUserLoginJSONRequestBody PostUserLoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /user/login)
	PostUserLogin(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUserLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserLogin(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/user/login", wrapper.PostUserLogin)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTzW7UMBB+FWvgGG3SAgd8A4kDEgeE1FNVIa8z2bg4Hndm0lW1yrsjO4Fl2x65Obbn",
	"+/OXE3iaMiVMKmBPIH7EydXlNzqE9AMfZhQt35kpI2vAepqdyJG4L2t9yggWRDmkAywNzIKc3ISvHC4N",
	"MD7MgbEHe3u+2ZwR75o/Q7S/R68FcRMjmZLgSzU/Q/861zOgshXSQOVyj+I5ZA2UwMKX1GcKSc1AbIoq",
	"MTQYHdEccW/2s4SEImZyyR1wwqQmR6cD8QQNaNBYaG4EGRp4RJYV9WrX7bqinzImlwNYeLfrdtfVro5V",
	"e1vY2lgMVmO0xn0pr/qvuswx6GgO4RHX75Kecak3f/OrbOzK5NceLHwn0aKsYsCaP4p+pv6pEHlKiqly",
	"upxj8HWyvRdK50aU1VvGASy8ac+Vabe+tBdlWS5fWXnGurG+XjV93XX/m3vrRiW/DO/TrCMm3dDN0YmR",
	"2XsUGeZYXud9d/Uy8mdTgwsR+3/T94x9ueCiFJAPq6VLkJv0K9ExGWQmNuT9zCWTZakyBbl0BeztCWaO",
	"YGFUzbZtI3kXRxK1p0ysS+tyaB+voHlRC++iWWFK8RwHt4/bH0q8FWlwc1Sw8LHrukJ9t/wOAAD//1NR",
	"bEL3AwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
