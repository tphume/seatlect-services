// Package user_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package user_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
}

// PostUsersLoginJSONBody defines parameters for PostUsersLogin.
type PostUsersLoginJSONBody LoginRequest

// PostUsersLoginRequestBody defines body for PostUsersLogin for application/json ContentType.
type PostUsersLoginJSONRequestBody PostUsersLoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /users/login)
	PostUsersLogin(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsersLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersLogin(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users/login", wrapper.PostUsersLogin)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTsW7cMAz9FYHtaJydtB2qrQU6FOhQFMgUZNDJ9FmJLCoknUNw8L8Xkt1eL8nYTZbI",
	"9x4fn0/gacqUMKmAPYH4ESdXjz/oENIvfJxRtHxnpoysAetrdiJH4r6c9TkjWBDlkA6wNDALcnITvvG4",
	"NMD4OAfGHuztubI5I941f5pof49eC+ImRjIlwddqlB4wvc32AqpchTRQKe5RPIesgRJY+Jb6TCGpGYhN",
	"0SWGBqMjmiPuzX6WkFDETC65A06Y1OTodCCeoAENGgvNjSBDA0/IsqJe7bpdVyagjMnlABY+7LrddR1Y",
	"x6q+rWxtLDPW2Wh1/FJftaAKM8egozmEJ1y/i4HGpd78tbDSsSud33uw8JNEizSpILDuAEW/Uv9cmDwl",
	"xVRJXc4x+Nra3gulcyrK6T3jABbetefYtFtm2ovALJebVp6xXqwbrGNfd93/5t7yUckv3fsy64hJN3Rz",
	"dGJk9h5FhjmW/Xzsrl57/qJrcCFi/6/9nrEvBS5KAfm0jnQJcpMeEh2TQWZiQ97PXDxZlipTkEtawN6e",
	"YOYIFkbVbNs2kndxJFF7ysS6tC6H9ukKmle58C6aFaZEz3Fw+7j9pcRbkgY3RwULn7uuK9R3y+8AAAD/",
	"/5MG1Xb7AwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
