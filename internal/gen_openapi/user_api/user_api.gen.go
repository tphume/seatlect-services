// Package user_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package user_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Id    *string `json:"_id,omitempty"`
	Token *string `json:"token,omitempty"`
}

// PostUsersLoginJSONBody defines parameters for PostUsersLogin.
type PostUsersLoginJSONBody LoginRequest

// PostUsersLoginRequestBody defines body for PostUsersLogin for application/json ContentType.
type PostUsersLoginJSONRequestBody PostUsersLoginJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /users/login)
	PostUsersLogin(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUsersLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsersLogin(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users/login", wrapper.PostUsersLogin)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTwW7cOgz8FYHvHY21k7aH6tYCPRTooSiQUxAUWpleK5FFhaSzCBb+90Ky2+0mOfYm",
	"S+TMcDg+gacpU8KkAvYE4kecXD1+o0NIP/BxRtHynZkysgasr9mJHIn7ctbnjGBBlEM6wNLALMjJTfjG",
	"49IA4+McGHuwt+fK5ox41/xuov09ei2ImxjJlARfq/kZ3hai9IDpbRUvKMpVSAOV4h7Fc8gaKIGFL6nP",
	"FJKagdgUvWJoMDqiOeLe7GcJCUXM5JI74IRJTY5OB+IJGtCgsdDcCDI08IQsK+rVrtt1RSJlTC4HsPBu",
	"1+2uqxE61qnaytbGMnudmdZNXOqr1lRh5hh0NIfwhOt3Mda41Js/1lY6dqXzaw8WvpNokSYVBNbdoOhn",
	"6p8Lk6ekmCqpyzkGX1vbe6F0Tks5/c84gIX/2nOc2i1L7UWQlssEKM9YL9bN1rGvu+5fc2+5qeSX7n2a",
	"dcSkG7o5OjEye48iwxzLft53V689f9E1uBCx/9t+z9iXAhelgHxYR7oEuUkPiY7JIDOxIe9nLp4sS5Up",
	"yCUtYG9PMHMEC6Nqtm0bybs4kqg9ZWJdWpdD+3QFzatceBfNClOi5zi4fdz+XuItSYObo4KFj13XFeq7",
	"5VcAAAD//2PIeNQTBAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
