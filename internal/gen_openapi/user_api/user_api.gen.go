// Package user_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package user_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Id *string `json:"_id,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Address      *string `json:"address,omitempty"`
	BusinessName *string `json:"businessName,omitempty"`
	Description  *string `json:"description,omitempty"`
	Email        *string `json:"email,omitempty"`
	Location     *struct {
		Latitude  *float32 `json:"latitude,omitempty"`
		Longitude *float32 `json:"longitude,omitempty"`
	} `json:"location,omitempty"`
	Password *string `json:"password,omitempty"`
	Type     *string `json:"type,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PostUserLoginJSONBody defines parameters for PostUserLogin.
type PostUserLoginJSONBody LoginRequest

// PostUserRegisterJSONBody defines parameters for PostUserRegister.
type PostUserRegisterJSONBody RegisterRequest

// PostUserLoginRequestBody defines body for PostUserLogin for application/json ContentType.
type PostUserLoginJSONRequestBody PostUserLoginJSONBody

// PostUserRegisterRequestBody defines body for PostUserRegister for application/json ContentType.
type PostUserRegisterJSONRequestBody PostUserRegisterJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /user/login)
	PostUserLogin(ctx echo.Context) error

	// (POST /user/register)
	PostUserRegister(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUserLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserLogin(ctx)
	return err
}

// PostUserRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserRegister(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/user/login", wrapper.PostUserLogin)
	router.POST(baseURL+"/user/register", wrapper.PostUserRegister)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RVQWvcPBD9K2K+72jWTtoe6lsDPRRKKYGcQihae7xWKkvKzHiXsOx/L5K83TjrLS20",
	"N9uS3pt5b568h8YPwTt0wlDvgZseB50eP/uNcbf4NCJLfA/kA5IYTKtBM+88tfFZngNCDSxk3AYOBYyM",
	"5PSAC4uHAgifRkPYQn1/2lmcEB+K4yG/fsRGIuJUDAfvGM+r+WbaZa4zoFvcGBaki43ptiVkXuxrPbJx",
	"yPxlubcCWuSGTBDj3eI6DtrYxRXrG308Ni/IajEyti8J3TiskfIxt7m0utT+L23LH/7Yz1ck8ZNxnY+b",
	"Z3rAR9cGb5yozpOKmKx8p6RHtcO1OoqrBu30Bgd0ooLV0nkaoAAxYiPNHSNBAVskzqhXq2pVxSp9QKeD",
	"gRrerKrVdRop6ZOGZWQrbRyiJLDPzs/LSzOW6lI7I73amC3m99i70q5VP+VLbJQc+9RCDV89S6wsYUCe",
	"cWS58e1zJGq8E3SJU4dgTfa6fORseE5dfPqfsIMa/itPsSynTJazQB7mSRIaMX3ICUlNX1fV3+ae8pfI",
	"5+J9GKVHJxO62mlWPDYNMnejje68ra7OJX91qtPGYvtS/YawjRu05QjyLrc0B7lz353fOYVEnpRvmpGi",
	"JodUZXaeptRfNv94L6RxPM1AfMuVxJGmIWf0kvtHkH80AK/vrt+agQXVb45J6/UW1Rqzzlom0Q4FMFIM",
	"GNT3exjJQg29SKjLMl5Ttvcs9T54kkOpgym3V1CcZanRVmWYmFZNRq/t9OvwNBnQ6dEK1PC+qqpI/XD4",
	"EQAA//+cdtrdkAYAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
