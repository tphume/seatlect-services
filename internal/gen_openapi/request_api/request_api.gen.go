// Package request_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package request_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ChangeRequest defines model for ChangeRequest.
type ChangeRequest struct {
	Id           *string   `json:"_id,omitempty"`
	Address      *string   `json:"address,omitempty"`
	BusinessName *string   `json:"businessName,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Location     *Location `json:"location,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// ListRequestResponse defines model for ListRequestResponse.
type ListRequestResponse struct {
	MaxPage *int             `json:"maxPage,omitempty"`
	Request *[]ChangeRequest `json:"request,omitempty"`
}

// Location defines model for Location.
type Location struct {
	Latitude  *float32 `json:"latitude,omitempty"`
	Longitude *float32 `json:"longitude,omitempty"`
}

// GetRequestParams defines parameters for GetRequest.
type GetRequestParams struct {
	Page int `json:"page"`
}

// PostRequestBusinessIdJSONBody defines parameters for PostRequestBusinessId.
type PostRequestBusinessIdJSONBody ChangeRequest

// PostRequestBusinessIdRequestBody defines body for PostRequestBusinessId for application/json ContentType.
type PostRequestBusinessIdJSONRequestBody PostRequestBusinessIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /request)
	GetRequest(ctx echo.Context, params GetRequestParams) error

	// (GET /request/{businessId})
	GetRequestBusinessId(ctx echo.Context, businessId string) error

	// (POST /request/{businessId})
	PostRequestBusinessId(ctx echo.Context, businessId string) error

	// (POST /request/{businessId}/approve)
	PostRequestBusinessIdApprove(ctx echo.Context, businessId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRequest converts echo context to params.
func (w *ServerInterfaceWrapper) GetRequest(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRequestParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRequest(ctx, params)
	return err
}

// GetRequestBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRequestBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRequestBusinessId(ctx, businessId)
	return err
}

// PostRequestBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) PostRequestBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRequestBusinessId(ctx, businessId)
	return err
}

// PostRequestBusinessIdApprove converts echo context to params.
func (w *ServerInterfaceWrapper) PostRequestBusinessIdApprove(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRequestBusinessIdApprove(ctx, businessId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/request", wrapper.GetRequest)
	router.GET(baseURL+"/request/:businessId", wrapper.GetRequestBusinessId)
	router.POST(baseURL+"/request/:businessId", wrapper.PostRequestBusinessId)
	router.POST(baseURL+"/request/:businessId/approve", wrapper.PostRequestBusinessIdApprove)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yWQWvjOhDHv4qY944mdvveZX3b7UIplKX0upRFsceOii2po3F2Q8h3XyTZcRw77bJQ",
	"6MmONRr95/+bQdlDYVprNGp2kO/BFRtsZXi92Uhd4yO+dOjYf7BkLBIrDMs/VOkfvLMIOTgmpWs4JCDL",
	"ktC5xbV155RG577JFhcDSnQFKcvK6MX1xhRyWPyXsIIc/knHCtJefno/xB0SYFkHNYqxXZbVf5BEcjf+",
	"ngWOkWb9jAX70HvluLfoEZ012uHcqlb+epD1aUqlGWskn4FGg48KXyttimWmflHkiWtTZY1kxV15Kk13",
	"7Toqa4yuL63Oj/GflK5MCFbc+LVBZQJbJBcUwNUqW2U+vbGopVWQw3+rbHUNCVjJmyArPTGlxvCYdEaw",
	"XQzdJKQuhWInimCN6DcLr4baWHk4jsL7XQk53CKP4qwk2SIjOci/70H5E146pB0koEOrgvX8IixFWELO",
	"1GHSj8sS2MOTj44dEWq6zjL/KIxm1KEkaW2jIpn02UU8Y8JX23uh6wKAqUuPyKRwi6Lxdplq6tiZW64r",
	"CnSu6prGt5HPNmBI98PGu/JwkcktspDCWSxUpYqz9K8A+HLMPUcxPeHuqy+CNyiGPZBEWr5zRljr04xv",
	"IjuO93sSO5vaOaubi70rqMdYzhglYI1bQHFDKBmFFBp/nnOuDAl57IQZlwfjPiaYKMmUu/dkMtV0mDXE",
	"1UWv/3KaUmktmW28NBZZfo4BJ8zeGq1FhH2aDzdi/88rHk7+wyHw3jqk7VBQRw3ksGG2eZr6PwzNxjjO",
	"99YQe79Vur2C8/HzV2QjYhp/XUlSct1EkX5jVFnJrmHI4VOWZf7op8PvAAAA//9PqVYxQAkAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
