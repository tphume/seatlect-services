// Package business_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package business_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AppendImageResponse defines model for AppendImageResponse.
type AppendImageResponse struct {
	Image *string `json:"image,omitempty"`
}

// Business defines model for Business.
type Business struct {
	Address      *string   `json:"address,omitempty"`
	BusinessName *string   `json:"businessName,omitempty"`
	Description  *string   `json:"description,omitempty"`
	DisplayImage *string   `json:"displayImage,omitempty"`
	Images       *[]string `json:"images,omitempty"`
	Location     *struct {
		Latitude  *string `json:"latitude,omitempty"`
		Longitude *string `json:"longitude,omitempty"`
	} `json:"location,omitempty"`
	Policy *struct {
		MinAge *int `json:"minAge,omitempty"`
	} `json:"policy,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
	Type *string   `json:"type,omitempty"`
}

// ImageUpload defines model for ImageUpload.
type ImageUpload string

// ListBusinessResponse defines model for ListBusinessResponse.
type ListBusinessResponse struct {
	Businesses *[]Business `json:"businesses,omitempty"`
}

// UpdateBusinessResponse defines model for UpdateBusinessResponse.
type UpdateBusinessResponse struct {
	Address      *string `json:"address,omitempty"`
	BusinessName *string `json:"businessName,omitempty"`
	Description  *string `json:"description,omitempty"`
	Location     *struct {
		Latitude  *string `json:"latitude,omitempty"`
		Longitude *string `json:"longitude,omitempty"`
	} `json:"location,omitempty"`
	Policy *struct {
		MinAge *int `json:"minAge,omitempty"`
	} `json:"policy,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
	Type *string   `json:"type,omitempty"`
}

// UpdateDisplayImageResponse defines model for UpdateDisplayImageResponse.
type UpdateDisplayImageResponse struct {
	DisplayImage *string `json:"displayImage,omitempty"`
}

// GetBusinessParams defines parameters for GetBusiness.
type GetBusinessParams struct {
	Status int `json:"status"`
	Page   int `json:"page"`
}

// PatchBusinessBusinessIdJSONBody defines parameters for PatchBusinessBusinessId.
type PatchBusinessBusinessIdJSONBody UpdateBusinessResponse

// PatchBusinessBusinessIdRequestBody defines body for PatchBusinessBusinessId for application/json ContentType.
type PatchBusinessBusinessIdJSONRequestBody PatchBusinessBusinessIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /business)
	GetBusiness(ctx echo.Context, params GetBusinessParams) error

	// (GET /business/{businessId})
	GetBusinessBusinessId(ctx echo.Context, businessId string) error

	// (PATCH /business/{businessId})
	PatchBusinessBusinessId(ctx echo.Context, businessId string) error

	// (PUT /business/{businessId}/displayImage)
	PutBusinessBusinessIdDisplayImage(ctx echo.Context, businessId string) error

	// (POST /business/{businessId}/images)
	PostBusinessBusinessIdImages(ctx echo.Context, businessId string) error

	// (DELETE /business/{businessId}/images/{pos})
	DeleteBusinessBusinessIdImagesPos(ctx echo.Context, businessId string, pos int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBusiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetBusiness(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBusinessParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBusiness(ctx, params)
	return err
}

// GetBusinessBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBusinessBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBusinessBusinessId(ctx, businessId)
	return err
}

// PatchBusinessBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchBusinessBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchBusinessBusinessId(ctx, businessId)
	return err
}

// PutBusinessBusinessIdDisplayImage converts echo context to params.
func (w *ServerInterfaceWrapper) PutBusinessBusinessIdDisplayImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutBusinessBusinessIdDisplayImage(ctx, businessId)
	return err
}

// PostBusinessBusinessIdImages converts echo context to params.
func (w *ServerInterfaceWrapper) PostBusinessBusinessIdImages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBusinessBusinessIdImages(ctx, businessId)
	return err
}

// DeleteBusinessBusinessIdImagesPos converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBusinessBusinessIdImagesPos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// ------------- Path parameter "pos" -------------
	var pos int

	err = runtime.BindStyledParameter("simple", false, "pos", ctx.Param("pos"), &pos)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pos: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBusinessBusinessIdImagesPos(ctx, businessId, pos)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/business", wrapper.GetBusiness)
	router.GET(baseURL+"/business/:businessId", wrapper.GetBusinessBusinessId)
	router.PATCH(baseURL+"/business/:businessId", wrapper.PatchBusinessBusinessId)
	router.PUT(baseURL+"/business/:businessId/displayImage", wrapper.PutBusinessBusinessIdDisplayImage)
	router.POST(baseURL+"/business/:businessId/images", wrapper.PostBusinessBusinessIdImages)
	router.DELETE(baseURL+"/business/:businessId/images/:pos", wrapper.DeleteBusinessBusinessIdImagesPos)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yXz2vrOBDH/xWh3aOJ3e5e1reGwBIoSyn0tPSg2BNHRZZUaZwlBP/viyQ7dmLlR3db",
	"3oP3TnH0Y2Y0n++M5T0tVK2VBImW5ntqiw3UzD8+aA2yXNasgmewWkkLblgbpcEgB7+Iu2n3gDsNNKcW",
	"DZcVbdukH1GrNyiQtgmdN5ZLsHZqhZWl6SZO7CR01e36i9UQXVCCLQzXyJWMz3OrBdstz0SahDOE0yDU",
	"8Si6AWYM27n/QhWs93h8FsGQY1PGXQklq3OzsZRpJXixmzqpuXw4Og2XCBWYuBVk1QePF/7fFKLP64sW",
	"ipVux1qZmiHN6ZxLZnY0mTp75BZ7LZxXVs/9hMyvBtY0p7+kg27TTrTpQWCTE8UCf9ElQ7geyJeK86eO",
	"jnEsRsV6HsmVkp6ad0NcrpVfzFG4uYNaEroFYz0EejfLZpkLR2mQTHOa099m2eyeJlQz3Hjv6WrUyCpA",
	"H9GYM/0TkAhukag1GXRMVjtikWFjCZMl0awCIpt6BYZ6f8YrYVkGA6PwNDOsBgRjaf73nnLn4r0BX13S",
	"K48GuzShBt4bbqCkOZoGkq6hxwnHTbm4Pmbo1a0OrHxO7rPM/RRKIkifHqa14EHp6ZsNch8MXqrpaLPw",
	"PI9T/gxoOGyhPCR+PiTeNkUB1q4bIVwzcLsPENN9/7Qs24tEe4PEKcl1Oa6kY7pcXOI3P1ifkjz2sVy4",
	"sHEDZMTeE3LSGwCtxhavYjoUxVdSGjrvlEw0beaA65SNL7RiM0UQGsRHKDw5Q7dw+O9JvoFglMN7Axbn",
	"qtx9GoIzrzOf0eP427gQbqDWeB/l7fWUnnZq3eB1suNN59A2kQIbvzy+Z8j+wplqWd1Od3zLajumX1TL",
	"F17Ekeru1hF/pl4glzUx3Le1shE5hA8PwoiEfzq7qEZ1H7ZPFKFsRBLLfvEPJYa7TxND7CMwooJQqswv",
	"vg1/utfKtiGhAhCmqV34ccJkpwEuBw1UfAuScLREK8v9hlM9hO3nFPGkvrUokqg/rez/vXv9HgnIJzAk",
	"uiRro2oyfmM7WBbMts9DYwTN6QZR52nqvlDERlnM91oZbFOmebq9o6cSeHTrSDDjrtTMcLYSfZ2brs7X",
	"rBHu6/CPLMuc69f23wAAAP//OQhR3IIQAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
