// Package business_api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package business_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// AppendImageResponse defines model for AppendImageResponse.
type AppendImageResponse struct {
	Image *string `json:"image,omitempty"`
}

// AppendMenuItemResponse defines model for AppendMenuItemResponse.
type AppendMenuItemResponse struct {
	Image *string `json:"image,omitempty"`
}

// Business defines model for Business.
type Business struct {
	Id           *string   `json:"_id,omitempty"`
	Address      *string   `json:"address,omitempty"`
	BusinessName *string   `json:"businessName,omitempty"`
	Description  *string   `json:"description,omitempty"`
	DisplayImage *string   `json:"displayImage,omitempty"`
	Images       *[]string `json:"images,omitempty"`
	Location     *Location `json:"location,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// GetMenuResponse defines model for GetMenuResponse.
type GetMenuResponse struct {
	Menu *[]MenuItem `json:"menu,omitempty"`
}

// ImageUpload defines model for ImageUpload.
type ImageUpload string

// ListBusinessResponse defines model for ListBusinessResponse.
type ListBusinessResponse struct {
	Businesses *[]Business `json:"businesses,omitempty"`
	MaxPage    *int        `json:"maxPage,omitempty"`
}

// Location defines model for Location.
type Location struct {
	Latitude  *float32 `json:"latitude,omitempty"`
	Longitude *float32 `json:"longitude,omitempty"`
}

// MenuItem defines model for MenuItem.
type MenuItem struct {
	Description *string `json:"description,omitempty"`
	Image       *string `json:"image,omitempty"`
	Name        *string `json:"name,omitempty"`
	Price       *string `json:"price,omitempty"`
}

// UpdateBusinessRequest defines model for UpdateBusinessRequest.
type UpdateBusinessRequest struct {
	Id           *string   `json:"_id,omitempty"`
	Address      *string   `json:"address,omitempty"`
	BusinessName *string   `json:"businessName,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Location     *Location `json:"location,omitempty"`
	Tags         *[]string `json:"tags,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// UpdateDisplayImageResponse defines model for UpdateDisplayImageResponse.
type UpdateDisplayImageResponse struct {
	DisplayImage *string `json:"displayImage,omitempty"`
}

// UpdateStatusRequest defines model for UpdateStatusRequest.
type UpdateStatusRequest struct {
	Status *int `json:"status,omitempty"`
}

// GetBusinessParams defines parameters for GetBusiness.
type GetBusinessParams struct {
	Status int `json:"status"`
	Page   int `json:"page"`
}

// PatchBusinessBusinessIdJSONBody defines parameters for PatchBusinessBusinessId.
type PatchBusinessBusinessIdJSONBody UpdateBusinessRequest

// PostBusinessBusinessIdMenuitemsJSONBody defines parameters for PostBusinessBusinessIdMenuitems.
type PostBusinessBusinessIdMenuitemsJSONBody MenuItem

// PatchBusinessBusinessIdStatusJSONBody defines parameters for PatchBusinessBusinessIdStatus.
type PatchBusinessBusinessIdStatusJSONBody UpdateStatusRequest

// PatchBusinessBusinessIdRequestBody defines body for PatchBusinessBusinessId for application/json ContentType.
type PatchBusinessBusinessIdJSONRequestBody PatchBusinessBusinessIdJSONBody

// PostBusinessBusinessIdMenuitemsRequestBody defines body for PostBusinessBusinessIdMenuitems for application/json ContentType.
type PostBusinessBusinessIdMenuitemsJSONRequestBody PostBusinessBusinessIdMenuitemsJSONBody

// PatchBusinessBusinessIdStatusRequestBody defines body for PatchBusinessBusinessIdStatus for application/json ContentType.
type PatchBusinessBusinessIdStatusJSONRequestBody PatchBusinessBusinessIdStatusJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /business)
	GetBusiness(ctx echo.Context, params GetBusinessParams) error

	// (GET /business/{businessId})
	GetBusinessBusinessId(ctx echo.Context, businessId string) error

	// (PATCH /business/{businessId})
	PatchBusinessBusinessId(ctx echo.Context, businessId string) error

	// (PUT /business/{businessId}/displayImage)
	PutBusinessBusinessIdDisplayImage(ctx echo.Context, businessId string) error

	// (POST /business/{businessId}/images)
	PostBusinessBusinessIdImages(ctx echo.Context, businessId string) error

	// (DELETE /business/{businessId}/images/{pos})
	DeleteBusinessBusinessIdImagesPos(ctx echo.Context, businessId string, pos int) error

	// (GET /business/{businessId}/menu)
	GetBusinessBusinessIdMenu(ctx echo.Context, businessId string) error

	// (POST /business/{businessId}/menuitems)
	PostBusinessBusinessIdMenuitems(ctx echo.Context, businessId string) error

	// (DELETE /business/{businessId}/menuitems/{name})
	DeleteBusinessBusinessIdMenuitemsName(ctx echo.Context, businessId string, name string) error

	// (PATCH /business/{businessId}/status)
	PatchBusinessBusinessIdStatus(ctx echo.Context, businessId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBusiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetBusiness(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBusinessParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBusiness(ctx, params)
	return err
}

// GetBusinessBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBusinessBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBusinessBusinessId(ctx, businessId)
	return err
}

// PatchBusinessBusinessId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchBusinessBusinessId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchBusinessBusinessId(ctx, businessId)
	return err
}

// PutBusinessBusinessIdDisplayImage converts echo context to params.
func (w *ServerInterfaceWrapper) PutBusinessBusinessIdDisplayImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutBusinessBusinessIdDisplayImage(ctx, businessId)
	return err
}

// PostBusinessBusinessIdImages converts echo context to params.
func (w *ServerInterfaceWrapper) PostBusinessBusinessIdImages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBusinessBusinessIdImages(ctx, businessId)
	return err
}

// DeleteBusinessBusinessIdImagesPos converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBusinessBusinessIdImagesPos(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// ------------- Path parameter "pos" -------------
	var pos int

	err = runtime.BindStyledParameter("simple", false, "pos", ctx.Param("pos"), &pos)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pos: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBusinessBusinessIdImagesPos(ctx, businessId, pos)
	return err
}

// GetBusinessBusinessIdMenu converts echo context to params.
func (w *ServerInterfaceWrapper) GetBusinessBusinessIdMenu(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBusinessBusinessIdMenu(ctx, businessId)
	return err
}

// PostBusinessBusinessIdMenuitems converts echo context to params.
func (w *ServerInterfaceWrapper) PostBusinessBusinessIdMenuitems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostBusinessBusinessIdMenuitems(ctx, businessId)
	return err
}

// DeleteBusinessBusinessIdMenuitemsName converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBusinessBusinessIdMenuitemsName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameter("simple", false, "name", ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBusinessBusinessIdMenuitemsName(ctx, businessId, name)
	return err
}

// PatchBusinessBusinessIdStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PatchBusinessBusinessIdStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "businessId" -------------
	var businessId string

	err = runtime.BindStyledParameter("simple", false, "businessId", ctx.Param("businessId"), &businessId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter businessId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchBusinessBusinessIdStatus(ctx, businessId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/business", wrapper.GetBusiness)
	router.GET(baseURL+"/business/:businessId", wrapper.GetBusinessBusinessId)
	router.PATCH(baseURL+"/business/:businessId", wrapper.PatchBusinessBusinessId)
	router.PUT(baseURL+"/business/:businessId/displayImage", wrapper.PutBusinessBusinessIdDisplayImage)
	router.POST(baseURL+"/business/:businessId/images", wrapper.PostBusinessBusinessIdImages)
	router.DELETE(baseURL+"/business/:businessId/images/:pos", wrapper.DeleteBusinessBusinessIdImagesPos)
	router.GET(baseURL+"/business/:businessId/menu", wrapper.GetBusinessBusinessIdMenu)
	router.POST(baseURL+"/business/:businessId/menuitems", wrapper.PostBusinessBusinessIdMenuitems)
	router.DELETE(baseURL+"/business/:businessId/menuitems/:name", wrapper.DeleteBusinessBusinessIdMenuitemsName)
	router.PATCH(baseURL+"/business/:businessId/status", wrapper.PatchBusinessBusinessIdStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTW/jNhD9KwTboxA5216qW40AhYFkEexiT8WioKWxzIVEMuTIrWHovxck9WWLUpRu",
	"0hrpKY5Ezgzfe/NE8kRTWSopQKChyYmadA8lcz9/VQpEtilZDp/AKCkM2MdKSwUaObhB3L62P/CogCbU",
	"oOYip3UdtU/k9hukSOuoCfgAotoglK8Tc10ZLsCYcZQ/eBaIEVGWZbqZMHq3baJ9ZCUEB2RgUs0VcinC",
	"77lRBTtuJlYQ+bX5VSKU4SqaB0xrdrT/FzJlbcYfNexoQn+Ie9rihrP4vh1nY7D8hVn8/4tA/w3QsjjN",
	"YAmiOss+V3YriHFRodwO2i+qkMzRu5O6ZEgTuuaC6SONxgu95wZbmUyX3FJ/Qc5c4Z32AmiW7K/Hcw1w",
	"gZCDDq/qfkDxeV0FQ45VNowkqnJrA1lliHzqbShNB/UozXPC5pOKFlO9ojRPlyrqi8oYQs/SUwUGr6Sn",
	"r679PFh3A6uZlvUzhjQd/jMyrKaZMO71MnnbR1zspBvNsbDvut6J6AG0cfDS25vVzcqWIBUIpjhN6E83",
	"q5sPNKKK4d6li7cDx88BR+K17kQKbpDIHem7mmyPxBdNmMiIYjmQplVcPu2422Q+wKA8xTQrAUEbmvx+",
	"otymeKrAeY3XfgtGRDU8VVxDRhPUFUTN1zSMUjiUretlgb7a0Z5+h8mH1cr+SaVAEA4eplTBvTbjb8YL",
	"uQ84K+mQdTo+zyH/BKg5HCDrgF/3wJsqTcGYXVUU1tPt7I7E+NT+2mT1LKNtQGKVZD2fS2E53dzN8bfu",
	"oo+ZPM+xubNl4x7IgHvHkJVeT9B2GPFZmro+e0uW+u/QmJkgbLqj65Ib12jpfkyBN4WXsPBoAy3h4Z+D",
	"vIDBIA/O09YyO74aBeHvlwP0vPx6pIOfxysJoly5FNnydoovvV9V+Dyxw0lTzFaB/hp+jq6ZY7eRiZXI",
	"l5M73HLWDadv1Mozn/ZAczfjiFtTK5B5TfTnDyVNQA7+jEYYEfBnExfloO399JEipAlIYtMO/l+J4fbV",
	"xBA6gAdU4FuVucHL6I9PSpraA1oAwhjaO/ecMNFogIteAzk/gCAcDVHScDfhUg9++pQiHuV/LYoomE9J",
	"871br4CZe3o80BnZaVmS4Qd7mqv2ED25JbKLbPdbdjDxp41F2yF7EryGznwjH728oQi0zf0IuZl90TxL",
	"3Slvgad26ayvWoRKz8QSQ33ocr3LTVR/EfRv+OroHjKgkYeOrGX22okhPlkSFlksaScNjNUxuNRUO1V8",
	"9LOuz1ib5XzPaek1jbW/u5g/7AzX2t4d7DgU2dKzzuf2XuDdnnjOb4mCfRtgzs8627DWETWgDy1ClS5o",
	"QveIKonjQqas2EuDyUlJjXXMFI8Pt3Tk6HYc8WFoRA9Mc7Yt2t2ubpx5x6oCaUJ/Wa1WNvXX+u8AAAD/",
	"/5xV2mcEGQAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
